export default [
    {
      title: "性能优化 --- 1. 性能优化从那些方面",
      content: `
      性能优化的话基本就分资源压缩，网络优化和代码和代码优化吧。然后资源压缩的话就是代码压缩和媒体资源压缩，网络优化就连接方面和缓存方面，代码方面就预加载懒加载减少重绘和重排还有防抖节流再就是有一个良好的编程习惯了。我先说一下资源压缩吧。
      `,
    },
    {
      title: "性能优化 --- 2.  资源压缩",
      content: `
      首先是代码资源压缩
      像压缩JavaScript的话 Webpack 通过使用如 Terser 这样的插件，移除 JavaScript 中的无用代码、注释、空格和换行符，以及对代码进行缩短变量名和函数名等操作以减少文件大小，提高加载速度。
      还有压缩CSS的话 Webpack 可以利用 cssnano、OptimizeCSSAssetsPlugin 等插件来优化和最小化 CSS 代码。
      再就是模块优化的话Webpack 可以进行 Tree shaking 来剔除项目中未引用的模块。
      然后是媒体资源
      首先是图片压缩可以通过缩小尺寸、降低分辨率、改变图像格式（如使用 JPEG、PNG、WebP 等），以及利用工具如 imagemin 对图像文件进行无损或有损压缩。
      还有视频压缩可以调整视频的编码参数，如比特率、分辨率，或转换为更高效的视频格式（如H.264、H.265或VP9）来减少视频文件的大小。
      再就是音频压缩可以通过更改音频格式（如MP3、AAC等），减少比特率来降低音频文件的体积。
      然后字体压缩因为全量字体包很大，所以具体需要哪些文案利用类似 font-spider 的工具裁剪后引入。
      `,
    },
    {
      title: "性能优化 --- 3. 网络连接",
      content: `
      先是连接优化，像使用CDN （内容分发网络）啊，DNS预解析，避免重定向和HTTP/2或HTTP/3这些。
      然后缓存优化的话，就是用一些响应头缓存控制头，比如：
      Cache-Control：这是一个 HTTP 响应头，可以指定资源被缓存的方式和时间。例如，Cache-Control: max-age=31536000 表示资源可以在本地缓存并在请求时重用一年。
      Expires：这是早期HTTP/1.0的缓存控制头，用于设置资源过期的绝对时间。现在通常推荐使用 Cache-Control 替代它。
      ETag/Last-Modified：这些响应头用于验证缓存的资源是否仍然是最新的。当资源变化时，服务器会提供更新的 ETag 或 Last-Modified 值，以此来触发资源的重新下载。
      `,
    },
    {
      title: "性能优化 --- 4. 代码优化",
      content: `
      1.预加载（Preloading）：对于核心资源，使用 <link rel="preload"> 提前加载。
      2.懒加载（Lazy Loading）：对于非关键资源推迟加载，如下方图片、非首屏的 JavaScript 模块等。可以减少初始加载的资源数量，加快页面加载速度。
        懒加载实现方式：
        JavaScript 监听滚动事件，当元素进入视口时，动态地将资源的URL设置到元素的src属性中。
        或利用现成的懒加载库（如lozad.js、lazysizes等）来实现懒加载效果
        适用场景：
        图像/视频 懒加载
      3.减少重绘与重排，这哥俩是浏览器渲染过程中最耗费性能的操作之二。
        正确使用防抖节流，处理页面上频繁触发的事件时（如滚动、窗口大小调整、键盘输入等），利用防抖节流能够减少事件处理函数被调用的次数，减少不必要计算和重绘，提升性能。
        保持良好编码习惯，便于功能上线后性能优化啊重构之类的。
      4.然后防抖节流，防抖的话比如：搜索框实时搜索啊，表单输入验证，还有浏览器窗口调整事件和鼠标移动事件。
        节流的话像：页面滚动事件，窗口大小调整，频繁点击按钮或者拖拽场景。

        以下是具体的，先不说，问再说！！！！！
        搜索框实时搜索：当用户在搜索框中输入内容时，通常需要实时进行搜索。使用防抖函数可以延迟搜索请求的发送，只在用户停止输入一段时间后才真正发送请求，避免频繁的请求操作。
        表单输入验证：在表单输入过程中，每次用户输入都可能触发验证操作。使用防抖函数可以延迟触发验证操作，只在用户输入完毕一段时间后进行验证，避免频繁的验证操作。
        浏览器窗口调整事件：当用户调整浏览器窗口大小时，会触发resize事件。使用防抖函数可以延迟resize事件的触发，只在用户停止调整窗口一段时间后才执行对应的操作，避免频繁的计算和布局操作。
        鼠标移动事件：在一些特定的交互场景中，需要根据鼠标的移动位置做出相应的交互。使用防抖函数可以延迟鼠标移动事件的触发，只在用户停止移鼠标一段时间后才执行相应的操作，避免过度频繁的操作。

        页面滚动事件：当用户滚动页面时，会频繁触发滚动事件。使用节流函数可以控制滚动事件的触发频率，避免过多的计算和渲染操作，提高页面的性能和流畅度。
        窗口大小调整：当用户调整浏览器窗口大小时，会不断触发resize事件。使用节流函数可以限制resize事件的触发频率，以避免过度计算和布局操作。
        频繁点击按钮：在某些场景下，点击按钮可能会触发重复的提交操作。使用节流函数可以限制按钮点击的触发频率，防止重复的提交。
        拖拽场景: 在某些场景下，频繁触发位置变动会造成性能问题，固定时间内只执行一次，防止超高频次触发位置变动
      `,
    },
    {
        title: "性能优化 --- 5. CDN的概念",
        content: `
        CDN（内容分发网络）通过一组位于全球各地的服务器，将网站的内容（例如图片、视频、网页文件等）从最靠近用户的服务器快速、可靠地发送给用户，从而提供快速、高效、低成本的内容传输服务。CDN系统通常由三个主要部分组成：
        分发服务系统：
        这里的关键部件是缓存设备，它们负责直接向用户提供内容，并通过与源站同步来获取更新的内容。缓存设备的数量和规模是衡量CDN系统服务性能的基本标准。
        负载均衡系统：
        负载均衡系统的主要职责是对发起服务请求的用户进行访问调度，以确定向用户提供服务的最优服务器物理位置。全局负载均衡根据用户就近原则进行调度，而本地负载均衡则负责内部设备的负载分配。
        运营管理系统：
        该系统包括运营管理和网络管理子系统，处理与外部系统的业务交互，并包含客户管理、产品管理、计费管理和统计分析等功能。
        就是说，CDN通过将网站内容存储在全球各地的服务器中，帮助网站提高内容传输速度和用户体验。这个系统的工作原理就像是把网站的内容放到离用户更近的地方，当用户访问网站时，就可以从距离最近的服务器获取所需的内容，从而减少传输时间和提高网页加载速度。
      `,
    },
    {
        title: "性能优化 --- 6. CDN的作用",
        content: `
        CDN（内容分发网络）的作用是为了让网站的内容能够更快速、更可靠地传输给用户，从而提升用户访问网站时的速度和体验。具体来说，CDN有以下几个作用：
        加速网站加载速度：CDN会将网站的图片、视频和其他静态资源缓存在离用户更近的服务器上，这样用户在访问网站时可以从附近的服务器获取这些内容，从而加快网站加载速度。
        减少网络延迟：由于用户能够从距离更近的服务器获取内容，CDN可以减少网络延迟，提高网站的响应速度，让用户能够更快地打开网页和浏览内容。
        减轻服务器负载：部分用户的访问请求会被分配给CDN的服务器处理，这样可以减轻原始服务器的负载压力，提高服务器的性能和稳定性。
        节省带宽成本：CDN可以减少网站跨地区传输的流量，降低网站的带宽成本，使网站运营更加经济高效。
        除此之外，CDN还有助于提高网站的安全性，能够抵御一些网络攻击，例如通过监控异常流量来防御DDoS攻击，以及通过全链路HTTPS通信来防范中间人攻击。作为一种基础的云服务，CDN还具有资源托管、按需扩展等优势，能够更好地处理流量高峰和突发访问量。
      `,
    },
    {
        title: "性能优化 --- 7. CDN的原理",
        content: `
        CDN（内容分发网络）的工作原理与DNS（域名解析系统）确实有密切关联。 CDN 和 DNS 是如何协同工作的。
        首先，当用户在浏览器中输入一个网址（比如www.test.com）时，浏览器会先检查自身的缓存，如果没找到，就会依次检查操作系统缓存、路由器缓存，再向网络服务提供商（ISP）的DNS服务器请求解析。
        这就引出了我们对 CDN 的讨论。CDN 会通过将网站的内容缓存在世界各地的服务器上，来优化网站内容的传输。当用户访问网站时，CDN会根据用户的位置和服务器负载情况，将用户的请求路由到最近的服务器上，这样用户可以更快速地获取所需的内容。这种方式可以加速网站的加载速度，减少网络延迟，同时减轻原始服务器的负载，提高整体的用户体验。
        在DNS中，当本地DNS服务器没有找到网址对应的IP地址时，它会向根域名服务器请求解析，然后依次向顶级域名服务器和次级域名服务器查询，最终获得网址对应的IP地址并返回给用户。而在CDN中，当用户访问网站时，CDN会根据用户位置和服务器负载情况，选择最合适的服务器来提供网站内容，从而加速内容传输。
        综上所述，CDN通过缓存和就近提供内容的方式，优化了网站内容的传输，而DNS则负责将用户输入的网址解析为对应的IP地址，二者共同协作，使用户能快速、高效地访问网站内容，提升了整体的用户体验。
      `,
    },
    {
        title: "性能优化 --- 8. CDN的使用场景",
        content: `
        CDN（内容分发网络）在实际应用中有着多种场景：
        网站加速：通过将静态资源如图片、视频、样式表等放在CDN上，用户可以从距离更近的CDN服务器获取这些资源，从而加快网页加载速度，改善用户体验。
        流媒体分发：CDN可用于快速、可靠地传输视频、音频等大型媒体文件到全球各地的用户设备，确保用户可以流畅观看视频、听取音频。
        软件分发：对于大型软件或游戏的发布与更新，CDN能够快速地将软件分发到全球各地的用户，减少下载时间，加快软件更新的部署。
        API请求加速：对于需要频繁请求后端API的网站和应用程序，CDN能够加速API的响应时间，提高系统的稳定性和性能。
        跨地区网络优化：对于跨地区的企业、服务提供商等，CDN能够优化全球网络传输，提高数据传输效率，降低网络延迟，改善数据传输质量。
        此外，还有其他使用场景，例如：
        第三方CDN服务：开发者可以使用第三方CDN服务来加速其开源项目的网络传输和加载速度。
        直播传送：CDN也支持直播传送，通过在全球范围内部署服务器来提高访问速度，确保用户可以流畅观看直播内容。
        `,
    },
  ];
  